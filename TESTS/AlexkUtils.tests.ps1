<#
    .SYNOPSIS
        Pester test for [C:\Program Files\WindowsPowerShell\Modules\AlexkUtils\AlexkUtils.psm1].
    .DESCRIPTION
        Generated by AlexKBuildTools\Get-PesterTemplate ( https://github.com/Alex-0293/AlexKBuildTools )
    .NOTES
        NAME    AlexkUtils.tests.ps1
        VER     1
        AUTHOR  Alexk
        CREATED 01.11.20
#>


clear-host
Import-Module -Name "Pester"
Import-Module -Name "AlexkUtils" -force
$TestedFilePath ="C:\Program Files\WindowsPowerShell\Modules\AlexKUtils\AlexkUtils.psm1"

$PesterPreference                  = [PesterConfiguration]::Default
$PesterPreference.Output.Verbosity = "Detailed"
$PesterPreference.Run.Exit         = $true

Context "AES" -skip {
    BeforeAll{
        $Location       = Split-Path -Path $TestedFilePath -Parent
        $AESKeyFilePath = "$Location\$($Global:gsTESTSFolder)\tempAES.txt"
        $VarFilePath    = "$Location\$($Global:gsTESTSFolder)\tempVar.txt"
        $TestVar        = 'dfv43534wer345231#$%t54t v56y45tv54542 54tvt54'
    }
    Describe "[Get-NewAESKey]" {
        It  "AES key length should be 32" {
            $AESKey = Get-NewAESKey -PassThru -AESKeyFilePath $AESKeyFilePath 
            $AESKey | Should -HaveCount 32
        }
        It  "AES key file should exist" {
            $AESKeyFilePath | Should -Exist
        }
    }
    Describe "[Set-VarToAESFile]"  {
        It  "AES variable file should exist" {
            Set-VarToAESFile -Var $TestVar -AESKeyFilePath $AESKeyFilePath -VarFilePath $VarFilePath
            $VarFilePath | Should -Exist
        }
        It  "AES variable file not empty" {
            Get-Content $VarFilePath | Should -not -BeNullOrEmpty
        }
    }    
    Describe "[Get-VarFromAESFile]" {
        It  "AES variable should be secure string" {
            $NewTestVar = Get-VarFromAESFile -AESKeyFilePath $AESKeyFilePath -VarFilePath $VarFilePath
            $NewTestVar | Should -BeOfType "SecureString"
        }
        It  "AES variable should be equal test variable" {
            $NewTestVar = Get-VarFromAESFile -AESKeyFilePath $AESKeyFilePath -VarFilePath $VarFilePath
            Get-VarToString -Var $NewTestVar | Should -be $TestVar
        }
    }
    AfterAll{
        Remove-Item -Path $AESKeyFilePath -Force
        Remove-Item -Path $VarFilePath -Force
    }

}

Context "VPN" -skip {

    Describe "[Connect-VPN]/[Disconnect-VPN]" {
        It  "Should be success" {

        }
    }
}

Context "Restart" -skip {
    Describe "[Restart-LocalHostInInterval]" {
        It  "name" {

        }
    }

    Describe "[Restart-Switches]" -skip {
        It  "name" {

        }
    }

    Describe "[Restart-SwitchInInterval]" -skip {
        It  "name" {

        }
    }

    Describe "[Restart-ServiceInInterval]" -skip {
        It  "name" {

        }
    }

}

Context "Credentials" {
    Describe "[Test-ElevatedRights]" {
        It  "Should be false" {
            $Anonymous = [Security.Principal.WindowsIdentity]::GetAnonymous()

            $ElevatedRights = Test-ElevatedRights -Identity $Anonymous
            $ElevatedRights | Should -be $false
        }
    }

}
exit
Context "Logging" {
    Describe "[Add-ToLog]" -skip {
        It  "name" {

        }
    }

    Describe "[Send-Alert]" -skip {
        It  "name" {

        }
    }

    Describe "[Set-State]" -skip {
        It  "name" {

        }
    }

    Describe "[Send-Email]" -skip {
        It  "name" {

        }
    }

    Describe "[New-TelegramMessage]" -skip {
        It  "name" {

        }
    }

}

Context "HTML" {
    Describe "[Get-HTMLTable]" -skip {
        It  "name" {

        }
    }

    Describe "[Get-HTMLRow]" -skip {
        It  "name" {

        }
    }

    Describe "[Get-HTMLRowFullness]" -skip {
        It  "name" {

        }
    }

    Describe "[Get-HTMLCol]" -skip {
        It  "name" {

        }
    }

    Describe "[Get-ContentFromHTMLTemplate]" -skip {
        It  "name" {

        }
    }

}

Context "Array" {
    Describe "[Get-UniqueArrayMembers]" -skip {
        It  "name" {

        }
    }

    Describe "[Get-DifferenceBetweenArrays]" -skip {
        It  "name" {

        }
    }

    Describe "[Join-Array]" -skip {
        It  "name" {

        }
    }

}

Context "Invoke" {
    Describe "[Start-PSScript]" -skip {
        It  "name" {

        }
    }

    Describe "[Import-ModuleRemotely]" -skip {
        It  "name" {

        }
    }

    Describe "[Invoke-PSScriptBlock]" -skip {
        It  "name" {

        }
    }

    Describe "[Start-Program]" -skip {
        It  "name" {

        }
    }

    Describe "[Start-Module]" -skip {
        It  "name" {

        }
    }

    Describe "[Invoke-CommandWithDebug]" -skip {
        It  "name" {

        }
    }

}

Context "Utils" {
    Describe "[Convert-SpecialCharacters]" -skip {
        It  "name" {

        }
    }

    Describe "[Convert-StringToDigitArray]" -skip {
        It  "name" {

        }
    }

    Describe "[Invoke-TrailerIncrease]" -skip {
        It  "name" {

        }
    }

    Describe "[Format-TimeSpan]" -skip {
        It  "name" {

        }
    }

    Describe "[Start-ParallelPortPing]" -skip {
        It  "name" {

        }
    }

    Describe "[Convert-FSPath]" -skip {
        It  "name" {

        }
    }

    Describe "[Get-ListByGroups]" -skip {
        It  "name" {

        }
    }

    Describe "[Get-EventList]" -skip {
        It  "name" {

        }
    }

    Describe "[Get-HelpersData]" -skip {
        It  "name" {

        }
    }

    Describe "[Get-CopyByBITS]" -skip {
        It  "name" {

        }
    }

    Describe "[Show-CopyStatus]" -skip {
        It  "name" {

        }
    }

    Describe "[Get-ACLArray]" -skip {
        It  "name" {

        }
    }

    Describe "[Resolve-IPtoFQDNinArray]" -skip {
        It  "name" {

        }
    }

}

Context "Dialog" {
    Describe "[Show-OpenDialog]" -skip {
        It  "name" {

        }
    }

    Describe "[Show-Notification]" -skip {
        It  "name" {

        }
    }

}

Context "Module" {
    Describe "[Get-SettingsFromFile]" -skip {
        It  "name" {

        }
    }

    Describe "[Get-ErrorReporting]" -skip {
        It  "name" {

        }
    }

}

